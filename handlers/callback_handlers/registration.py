from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.dispatcher import FSMContext
from aiogram import types

from loader import bot, dp
from states.user_states import UserStates
from database import crud


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text='start_registration', state='*')
async def send_registration_request(call: types.CallbackQuery, state: FSMContext):
	await call.message.delete_reply_markup()

	if crud.table_registration_request.get_request_by_telegram_id(call.from_user.id):
		await call.message.reply('üö´ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
	else:
		await bot.send_message(
			call.from_user.id,
			'–í–≤–µ–¥–∏—Ç–µ <b>–§–ò–û</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n\n'
			'<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> –ò–≤–∞–Ω–æ–≤ –ú–∞–∫—Å–∏–º –ò–≥–æ—Ä–µ–≤–∏—á'
		)
		await state.set_state(UserStates.registration_wait_name)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE),
						   text_startswith='registration_request_accept', state='*')
async def accept_registration_request(call: types.CallbackQuery, state: FSMContext):
	request_id, request_sender_telegram_id = map(int, call.data.split(':')[1:])

	await bot.delete_message(call.from_user.id, call.message.message_id)

	crud.table_registration_request.close_registration_request(request_id)
	await bot.send_message(
		request_sender_telegram_id,
		'‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω!\n\n'
		'‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞,'
		'–≤–µ—Ä–æ—è—Ç–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞—Å –≤ –±–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
	)
	crud.table_employee.load_employees()  # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE),
						   text_startswith='registration_request_cancel', state='*')
async def cancel_registration_request(call: types.CallbackQuery, state: FSMContext):
	request_id, request_sender_telegram_id = map(int, call.data.split(':')[1:])
	await call.message.delete_reply_markup()
	crud.table_registration_request.close_registration_request(request_id)
	await call.message.reply('Registration request closed', reply_markup=None)
