from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.dispatcher import FSMContext
from aiogram import types

from loader import bot, dp
from states.user_states import UserStates
from database import crud
import keyboards
from utils.export import export_employees


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), content_types=['text'],
					state=UserStates.admin_menu)
async def admin_action_chosen(message: types.Message, state=FSMContext):
	if message.text == 'üìÉ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏':
		employees = crud.table_employee.get_all()
		if len(employees):
			text = '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
		else:
			text = '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç'

		await bot.send_message(
			chat_id=message.from_user.id,
			text=text,
			reply_markup=keyboards.inline.edit_employees.employees_markup(employees)
		)

	elif message.text == 'üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
		file_path = export_employees()

		with open(file_path, 'rb') as file:
			await bot.send_document(chat_id=message.from_user.id, document=file)

		await state.set_state(UserStates.admin_menu)
		await bot.send_message(
			chat_id=message.from_user.id,
			text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
			reply_markup=keyboards.reply.admin.admin_markup()
		)

	elif message.text == 'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ–Ω–∏–∫–æ–≤':
		if crud.table_student.load_students():
			await bot.send_message(
				chat_id=message.from_user.id,
				text='–î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
		else:
			await bot.send_message(
				chat_id=message.from_user.id,
				text='–£–ø—Å... –ó–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–æ–≤.')

		await state.set_state(UserStates.admin_menu)
		await bot.send_message(
			chat_id=message.from_user.id,
			text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
			reply_markup=keyboards.reply.admin.admin_markup()
		)

	elif message.text == 'üìì –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫':
		blocked_users = crud.table_blocked_user.get_all()
		n = len(blocked_users)  # –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

		if not n:
			await bot.send_message(chat_id=message.from_user.id, text='–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
			await state.set_state(UserStates.admin_menu)
			await bot.send_message(
				chat_id=message.from_user.id,
				text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
				reply_markup=keyboards.reply.admin.admin_markup()
			)
			return

		user = blocked_users[0]
		text = f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {1}/{n}\n\n' \
			   f'<b>–§–ò–û:</b> {user.fullname}\n' \
			   f'<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> {user.username}\n' \
			   f'<b>Telegram ID:</b> <code>{user.telegram_id}</code>'
		await bot.send_message(
			chat_id=message.from_user.id,
			text=text,
			reply_markup=keyboards.inline.black_list.black_list_markup(0, n)
		)

	elif message.text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞':
		await state.set_state(UserStates.admin_mailing_wait_message)
		await bot.send_message(
			chat_id=message.from_user.id,
			text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è',
			reply_markup=keyboards.inline.admin_mailing.cancel_markup()
		)

	elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
		await state.set_state(UserStates.main_menu)
		await bot.send_message(
			chat_id=message.from_user.id,
			text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
			reply_markup=keyboards.reply.start.start_markup(message.from_user.id)
		)
